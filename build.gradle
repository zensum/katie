apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'

group = 'se.zensum'
version = '1.0-SNAPSHOT'
description = 'A service to forward/push HTTP requests to an URL endpoint from Kafka messages'

defaultTasks 'build'

buildscript {
    ext.kotlin_version = '1.2.60'
    ext.jvm_version = '1.8'
    ext.junit_platform_version = '1.2.0'
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven {
        url "https://jitpack.io"
        if(System.getenv("JITPACK_TOKEN") == null) {
            System.err.println("JITPACK_TOKEN was null. Only public repositories will be accessible.")
        }
        credentials { username System.getenv("JITPACK_TOKEN") ?: "" }
    }
}

dependencies {
    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:0.24.0'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.24.0'
    
    // Junit
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testRuntime "org.junit.platform:junit-platform-launcher:$junit_platform_version"
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
    
    // Logging
    compile 'io.github.microutils:kotlin-logging:1.4.9'
    
    // Project specific dependencies (disabled by default)
    //compile 'com.github.zensum:franz:feature-interfaces-SNAPSHOT:sources'
    compile 'com.github.zensum:franz:219116e42'
    compile 'com.github.zensum:franz-sentry-interceptor:560af9904f'
    //compile 'com.github.zensum:server-utilities:master-SNAPSHOT'
    //compile 'com.github.zensum:secret-connector:0.2.1'
    compile "io.ktor:ktor-server-netty:0.9.3"
    compile 'com.github.zensum:idempotence-connector:0.2.4'
    compile 'com.github.zensum:webhook-proto:43f4f77'
    compile 'com.moandjiezana.toml:toml4j:0.7.2'
    compile 'com.github.jkcclemens:khttp:eab56a27d3'
}

jar {
    manifest {
        attributes 'Main-Class': "se.zensum.katie.MainKt"
    }
}

shadowJar {
    baseName = 'shadow'
    classifier = null
    version = null
}

compileKotlin {
    sourceCompatibility = jvm_version
    kotlinOptions {
        jvmTarget = jvm_version
    }
}

compileJava {
    sourceCompatibility = jvm_version
    targetCompatibility = jvm_version
    options.incremental = true
    options.encoding = 'UTF-8'
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

test {
    useJUnitPlatform()
}

// Important: All classes containing test cases must match the
// the regex pattern "^.*Tests?$" to be picked up by the junit-gradle plugin.
// Test cases can NOT exist outside a class, since then it will not be picked up by Gradle.
sourceSets {
    main.resources.srcDirs += 'src/main/resources'
    main.kotlin.srcDirs += 'src/main/kotlin'
    test.kotlin.srcDirs += 'src/test/kotlin'
    main.java.srcDirs += 'src/main/java'
    test.java.srcDirs += 'src/test/java'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task run(type: JavaExec) {
    main = "se.zensum.katie.MainKt" //Important that 'Kt' is appended to class name
    classpath = sourceSets.main.runtimeClasspath
}

task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts for faster execution'
    gradleVersion = '4.9'
}
